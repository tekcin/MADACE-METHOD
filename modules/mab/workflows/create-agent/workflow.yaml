workflow:
  name: create-agent
  description: Create a custom AI agent (Builder guided)
  agent: builder
  phase: any

  steps:
    - name: Introduction
      action: display
      message: |
        üõ†Ô∏è Custom Agent Creation Workflow

        I'll guide you through creating a custom AI agent for MADACE.

        Let's build something amazing!

    - name: Choose Agent Type
      action: elicit
      prompt: |
        **Agent Type**

        What type of agent are you creating?

        1. Module Agent - Part of a module (e.g., PM, Architect)
        2. Standalone Agent - Independent, reusable
        3. Core Agent - Framework-level (advanced)

        Enter type (1, 2, or 3):

    - name: Gather Agent Name
      action: elicit
      prompt: |
        **Agent Name**

        What is your agent's name? (lowercase, single word)
        Examples: coach, reviewer, designer, planner

        Agent name:

    - name: Gather Agent Title
      action: elicit
      prompt: |
        **Agent Title**

        Full descriptive title for your agent:
        Example: "Code Review Coach"

        Agent title:

    - name: Gather Agent Icon
      action: elicit
      prompt: |
        **Agent Icon**

        Choose an emoji icon for your agent:
        Examples: üéØ üìã üöÄ üí° üé® üîß

        Agent icon:

    - name: Gather Agent Role
      action: elicit
      prompt: |
        **Agent Role**

        What is your agent's primary role? (1-2 sentences)
        Example: "Expert code reviewer who helps improve code quality"

        Agent role:

    - name: Gather Agent Identity
      action: elicit
      prompt: |
        **Agent Identity**

        Detailed description of your agent's expertise and capabilities:
        (What can this agent do? What's their personality?)

        Agent identity:

    - name: Gather Communication Style
      action: elicit
      prompt: |
        **Communication Style**

        How does your agent communicate?
        Example: "Supportive and constructive, providing actionable feedback"

        Communication style:

    - name: Gather Principles
      action: elicit
      prompt: |
        **Core Principles**

        What principles guide your agent's behavior? (one per line)
        Example:
        - Always explain reasoning
        - Provide examples
        - Respect user expertise

        Principles:

    - name: Gather Menu Commands
      action: elicit
      prompt: |
        **Menu Commands**

        What commands should your agent have? (one per line)
        Format: *command-name: Description

        Example:
        *review-code: Review code for quality
        *suggest-improvements: Suggest improvements

        Commands:

    - name: Determine Output Path
      action: calculate_path
      agent_type: "{agent_type}"
      agent_name: "{agent_name}"

    - name: Render Agent Definition
      action: render_template
      template: "templates/agent-{agent_type_name}.yaml"
      output_file: "{agent_output_path}"
      variables:
        agent_name: "{agent_name}"
        agent_title: "{agent_title}"
        agent_icon: "{agent_icon}"
        agent_role: "{agent_role}"
        agent_identity: "{agent_identity}"
        communication_style: "{communication_style}"
        principles: "{principles}"
        menu_commands: "{menu_commands}"
        module_name: "{module_name}"

    - name: Validate Agent
      action: validate_yaml
      file_path: "{agent_output_path}"

    - name: Confirm Agent Created
      action: display
      message: |
        ‚úÖ Custom Agent Created!

        File: {agent_output_path}

        Your agent is ready to use!

        Next steps:
        1. Review the agent file
        2. Create workflows for your agent: madace builder create-workflow
        3. Test your agent: madace agent {agent_name}

  variables:
    agent_type: ""
    agent_type_name: ""
    agent_name: ""
    agent_title: ""
    agent_icon: ""
    agent_role: ""
    agent_identity: ""
    communication_style: ""
    principles: ""
    menu_commands: ""
    module_name: ""
    agent_output_path: ""
