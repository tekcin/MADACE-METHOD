workflow:
  name: jit-tech-spec
  description: Create Just-In-Time tech spec for current epic (per-epic basis)
  agent: architect
  phase: 3

  steps:
    - name: Introduction
      action: display
      message: |
        üìê Just-In-Time Tech Spec Workflow

        This creates a detailed technical specification for a specific epic,
        right before you start implementing its stories.

        This approach:
        - Incorporates learnings from previous epics
        - Avoids over-planning
        - Keeps specs fresh and relevant

    - name: Identify Epic
      action: elicit
      prompt: |
        Which epic are you creating a tech spec for?

        Enter epic number (e.g., 1, 2, 3):

    - name: Load Solution Architecture
      action: load_file
      file_path: "{output_folder}/solution-architecture.md"
      optional: true
      hint: "Run: madace architect solution-architecture if not yet created"

    - name: Load Epics File
      action: load_file
      file_path: "{output_folder}/Epics.md"

    - name: Extract Epic Stories
      action: extract_epic_stories
      epic_number: "{epic_number}"
      epics_content: "{epics_content}"

    - name: Display Epic Summary
      action: display
      message: |
        Epic {epic_number} Summary:

        {epic_title}

        Stories in this epic: {story_count}
        {story_list}

    - name: Gather Technical Approach
      action: elicit
      prompt: |
        **Technical Approach**

        How will you implement this epic?
        - What components/modules are involved?
        - What patterns will you use?
        - How does this fit into the overall architecture?

    - name: Gather Implementation Details
      action: elicit
      prompt: |
        **Implementation Details**

        Provide specific implementation guidance:
        - File structure
        - Key functions/classes
        - Data models
        - API endpoints (if applicable)

    - name: Gather Testing Strategy
      action: elicit
      prompt: |
        **Testing Strategy**

        How will you test this epic?
        - Unit tests
        - Integration tests
        - Manual testing checklist

    - name: Gather Dependencies
      action: elicit
      prompt: |
        **Dependencies**

        List any dependencies or prerequisites:
        (Press Enter to skip if none)

    - name: Render Tech Spec
      action: render_template
      template: templates/tech-spec-epic.md
      output_file: "{output_folder}/tech-spec-epic-{epic_number}.md"
      variables:
        epic_number: "{epic_number}"
        epic_title: "{epic_title}"
        story_list: "{story_list}"
        story_count: "{story_count}"
        technical_approach: "{technical_approach}"
        implementation_details: "{implementation_details}"
        testing_strategy: "{testing_strategy}"
        dependencies: "{dependencies}"
        project_name: "{project_name}"
        date: "{date}"

    - name: Confirm Tech Spec Created
      action: display
      message: |
        ‚úÖ Tech Spec Created for Epic {epic_number}!

        File: {output_folder}/tech-spec-epic-{epic_number}.md

        This spec will guide implementation of all {story_count} stories in this epic.

        Next steps:
        1. Review the tech spec
        2. Initialize BACKLOG (if not done): madace sm init-backlog
        3. Start implementing stories: madace sm create-story

  variables:
    epic_number: ""
    epic_title: ""
    story_list: ""
    story_count: 0
    epics_content: ""
    technical_approach: ""
    implementation_details: ""
    testing_strategy: ""
    dependencies: ""
